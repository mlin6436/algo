https://leetcode.com/problems/perfect-squares/

class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j*j <= i; j++) {
                dp[i] = Math.min(dp[i], dp[i - j*j] + 1);
            }
        }
        return dp[n];
    }
}

====

class Solution {
    public int numSquares(int n) {
        var res = new ArrayList();
        getNum(n, 0, res);
        Collections.sort(res);
        return (int) res.get(0);
    }
    
    private void getNum(int n, int tmp, List<Integer> res) {
        if (n == 0) {
            res.add(tmp);
            return;
        }
        
        if (n < 0) {
            return;
        }
        
        int sqrt = (int) Math.sqrt(n);
        for (int i = sqrt; i >= 1; i--) {
            getNum(n - i*i, tmp + 1, res);
        }
    }
}
