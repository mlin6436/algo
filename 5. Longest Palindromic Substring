https://leetcode.com/problems/longest-palindromic-substring/

#DynamicProgramming

class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        int l = -1;
        int r = -1;
        int max = 0;
        for (int gap = 0; gap < n; gap++) {
            for (int i = 0, j = gap; j < n; i++, j++) {
                if (gap == 0) {
                    dp[i][j] = true;
                } else if (gap == 1) {
                    dp[i][j] = s.charAt(i) == s.charAt(j);
                } else {
                    dp[i][j] = s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1];
                }

                if (dp[i][j] && (j - i + 1) > max) {
                    l = i;
                    r = j;
                    max = j - i + 1;
                }
            }
        }
        return s.substring(l, r + 1);
    }
}

====

#TwoPointers

class Solution {
    public String longestPalindrome(String s) {
        int start = 0;
        int end = 0;
        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expand(s, i, i);
            int len2 = expand(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - ((len - 1) / 2);
                end = i + (len / 2);
            }
        }
        return s.substring(start, end + 1);
    }

    private int expand(String s, int l, int r) {
        int count = 0;
        while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {
            count = r - l + 1;
            l--;
            r++;
        }
        return count;
    }
}

====

#DynamicProgramming

class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        int max = 0;
        int start = 0;
        int end = 0;
        boolean[][] dp = new boolean[len][len];
        for (int i = 0; i < len; i++) {
            for (int j = i; j < len; j++) {
                if (isPalindrome(s, dp, i, j) && (j - i) > max) {
                    max = j - i;
                    start = i;
                    end = j;
                }
            }
        }
        return s.substring(start, end + 1);
    }

    public boolean isPalindrome(String s, boolean[][] dp, int left, int right) {
        while (left <= right) {
            if (dp[left][right] || s.charAt(left) != s.charAt(right)) {
                return false;
            }
            dp[left][right] = true;
            left++;
            right--;
        }
        return true;
    }
}

====

#TwoPointers

class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        int max = 0;
        int start = 0;
        int end = 0;
        for (int i = 0; i < len; i++) {
            for (int j = i; j < len; j++) {
                if (isPalindrome(s, i, j) && (j - i) > max) {
                    max = max, j - i;
                    start = i;
                    end = j;
                }
            }
        }
        return s.substring(start, end + 1);
    }

    public boolean isPalindrome(String s, int left, int right) {
        while (left <= right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
