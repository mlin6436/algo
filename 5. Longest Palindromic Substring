https://leetcode.com/problems/longest-palindromic-substring/

class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        int max = 0;
        int start = 0;
        int end = 0;
        boolean[][] dp = new boolean[len][len];
        for (int i = 0; i < len; i++) {
            for (int j = i; j < len; j++) {
                if (isPalindrome(s, dp, i, j) && (j - i) > max) {
                    max = j - i;
                    start = i;
                    end = j;
                }
            }
        }
        return s.substring(start, end + 1);
    }

    public boolean isPalindrome(String s, boolean[][] dp, int left, int right) {
        while (left <= right) {
            if (dp[left][right] || s.charAt(left) != s.charAt(right)) {
                return false;
            }
            dp[left][right] = true;
            left++;
            right--;
        }
        return true;
    }
}

====

class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        int max = 0;
        int start = 0;
        int end = 0;
        for (int i = 0; i < len; i++) {
            for (int j = i; j < len; j++) {
                if (isPalindrome(s, i, j) && (j - i) > max) {
                    max = max, j - i;
                    start = i;
                    end = j;
                }
            }
        }
        return s.substring(start, end + 1);
    }

    public boolean isPalindrome(String s, int left, int right) {
        while (left <= right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
