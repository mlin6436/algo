https://leetcode.com/problems/sliding-window-maximum/

#Deque

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int[] res = new int[n - k + 1];
        Deque<Integer> dq = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            while (dq.size() > 0 && dq.peekFirst() <= i - k) {
                dq.pollFirst();
            }
            while (dq.size() > 0 && nums[dq.peekLast()] < nums[i]) {
                dq.pollLast();
            }
            dq.offerLast(i);
            if (i >= k - 1) {
                res[i - k + 1] = nums[dq.peekFirst()];
            }
        }
        return res;
    }
}

#PriorityQueue

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int[] res = new int[n - k + 1];
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b) -> b - a);
        for (int i = 0; i < n; i++) {
            int start = i - k;
            if (start >= 0) {
                pq.remove(nums[start]);
            }
            pq.offer(nums[i]);
            if (pq.size() == k) {
                res[i - k + 1] = pq.peek();
            }
        }
        return res;
    }
}
