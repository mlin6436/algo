https://leetcode.com/problems/search-a-2d-matrix/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int targetRow = -1;
        boolean res = false;
        for (int row = 0; row < rows; row++) {
            if (matrix[row][0] == target || target == matrix[row][cols - 1]) {
                return true;
            }
            if (matrix[row][0] < target && target < matrix[row][cols - 1]) {
                targetRow = row;
            }
        }
        
        if (targetRow == -1) {
            return false;
        } else {
            return bs(matrix, target, targetRow, 0, cols - 1);    
        }
    }
    
    private boolean bs(int[][] matrix, int target, int row, int colStart, int colEnd) {
        if (colStart > colEnd) {
            return false;
        }
        
        int mid = (colStart + colEnd) / 2;
        if (matrix[row][mid] == target) {
            return true;
        } else if (matrix[row][mid] < target) {
            return bs(matrix, target, row, mid + 1, colEnd);
        } else {
            return bs(matrix, target, row, colStart, mid - 1);
        }
    }
}
