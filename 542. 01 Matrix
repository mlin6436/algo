https://leetcode.com/problems/01-matrix/

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int[][] res = new int[mat.length][mat[0].length];
        for (int[] row: res) {
            Arrays.fill(row, 10000);
        }
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[0].length; j++) {
                if (mat[i][j] == 0) {
                    res[i][j] = 0;
                } else {
                    if (i > 0) {
                        res[i][j] = Math.min(res[i][j], res[i - 1][j] + 1);
                    }
                    if (j > 0) {
                        res[i][j] = Math.min(res[i][j], res[i][j - 1] + 1);
                    }
                }
            }
        }
        for (int i = mat.length - 1; i >= 0; i--) {
            for (int j = mat[0].length - 1; j >= 0; j--) {
                if (res[i][j] != 0) {
                    if (i < mat.length - 1) {
                        res[i][j] = Math.min(res[i][j], res[i + 1][j] + 1);
                    }
                    if (j < mat[0].length - 1) {
                        res[i][j] = Math.min(res[i][j], res[i][j + 1] + 1);
                    }
                }
            }
        }
        return res;
    }
}

====

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int rows = mat.length;
        int cols = mat[0].length;
        int[][] res = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (mat[i][j] != 0) {
                    int up = 10000;
                    int left = 10000;
                    if (i - 1 >= 0) {
                        up = res[i - 1][j];
                    }
                    if (j - 1 >= 0) {
                        left = res[i][j - 1];
                    }
                    
                    int temp = Math.min(up, left);
                    if (temp != Integer.MAX_VALUE) {
                        res[i][j] = temp + 1;
                    } else {
                        res[i][j] = mat[i][j];
                    }
                }
            }
        }

        for (int i = rows - 1; i >= 0; i--) {
            for (int j = cols - 1; j >= 0; j--) {
                if (mat[i][j] != 0) {
                    int down = 10000;
                    int right = 10000;
                    if (i + 1 < rows) {
                        down = res[i + 1][j];
                    }
                    if (j + 1 < cols) {
                        right = res[i][j + 1];
                    }
                    
                    int temp = Math.min(down, right);
                    if (temp != Integer.MAX_VALUE) {
                        res[i][j] = Math.min(res[i][j], 1 + temp);    
                    }
                }
            }
        }
        
        return res;
    }
}
