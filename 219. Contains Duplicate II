https://leetcode.com/problems/contains-duplicate-ii/

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int len = nums.length;
        Map<Integer, Integer> temp = new HashMap();
        
        for (int i = 0; i < len; i++) {
            temp.put(nums[i], temp.getOrDefault(nums[i], 0) + 1);
            if (temp.containsKey(nums[i]) && temp.get(nums[i]) > 1) {
                return true;
            }
            if (i >= k) {
                temp.put(nums[i - k], temp.get(nums[i - k]) - 1);
            }
        }
        
        return false;
    }
}

====

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int len = nums.length;
        if (len == 0 || k == 0) {
            return false;
        }
        
        Set<Integer> temp = new HashSet();
        if (len < k) {
            for (int i = 0; i < len; i++) {
                temp.add(nums[i]);
            }    
            if (temp.size() < len) {
                return true;
            }
        } else {
            for (int i = 0; i < k; i++) {
                temp.add(nums[i]);
            }    
            if (temp.size() < k) {
               return true;
            }
        }
        
        for (int i = k; i < len; i++) {
            if (temp.contains(nums[i])) {
                return true;
            }
            temp.remove(nums[i - k]);
            temp.add(nums[i]);
        }
        
        return false;
    }
}
