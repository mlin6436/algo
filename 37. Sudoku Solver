https://leetcode.com/problems/sudoku-solver/

class Solution {
    public void solveSudoku(char[][] board) {
        solve(board, 0, 0);
    }
    
    private boolean solve(char[][] board, int i, int j) {
        if (i == 8 && j == 9) {
            return true;
        }
        
        if (j == 9) {
            i++;
            j = 0;
        }
        
        if (board[i][j] == '.') {
            for (int k = 1; k <= 9; k++) {
                if (valid(board, i, j, (char)(k + '0'))) {
                    board[i][j] = (char)(k + '0');
                    if (solve(board, i, j+1)) {
                        return true;
                    }
                    board[i][j] = '.';
                }
            }
        } else {
            return solve(board, i, j+1);
        }
        
        return false;
    }
    
    private boolean valid(char[][] board, int i, int j, char v) {
        for (int k = 0; k < 9; k++) {
            if (board[i][k] == v) return false;
            if (board[k][j] == v) return false;
        }
        
        for (int x = (i/3)*3; x < (i/3+1)*3; x++) {
            for (int y = (j/3)*3; y < (j/3+1)*3; y++) {
                if (board[x][y] == v) return false;
            }
        }
        
        return true;
    }
}

====

class Solution {
    boolean solved = false;
    
    public void solveSudoku(char[][] board) {
        solve(board, 0, 0);
    }
    
    private void solve(char[][] board, int i, int j) {
        if (i == 8 && j == 9) {
            solved = true;
            return;
        }
        
        if (j == 9) {
            i++;
            j = 0;
        }
        
        if (board[i][j] == '.') {
            for (var k = 1; k <= 9; k++) {
                if (valid(board, i, j, (char) ('0' + k))) {
                    board[i][j] = (char) ('0' + k);
                    solve(board, i, j + 1);
                    if (!solved) {
                        board[i][j] = '.';
                    }
                } 
            }    
        } else {
            solve(board, i, j + 1);
        }
    }
    
    private boolean valid(char[][] board, int i, int j, char c){
        for (int k = 0; k < 9; k++) {
            if (board[k][j] == c) return false;
            if (board[i][k] == c) return false;
        }
        int id = (i / 3) * 3 + (j / 3);
        for (int x = 0; x < 3; x++) {
            for (int y = 0; y < 3; y++) {
                int row = x + (id / 3) * 3;
                int col = y + (id % 3) * 3;
                if (board[row][col] == c) {
                    return false;
                }
            }
        }
        return true;
    }
}
