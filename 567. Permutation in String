https://leetcode.com/problems/permutation-in-string/

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int len1 = s1.length();
        int len2 = s2.length();

        if (len1 > len2) {
            return false;
        }

        int[] char1 = new int[26];
        int[] char2 = new int[26];
        for (int i = 0; i < len1; i++) {
            char cur1 = s1.charAt(i);
            char1[cur1 - 'a']++;
            char cur2 = s2.charAt(i);
            char2[cur2 - 'a']++;
        }

        if (Arrays.equals(char1, char2)) {
            return true;
        }

        int start = 0;
        int end = len1;
        while (end < len2) {
            char prev = s2.charAt(start);
            char2[prev - 'a']--;

            char cur = s2.charAt(end);
            char2[cur - 'a']++;

            if (Arrays.equals(char1, char2)) {
                return true;
            }

            start++;
            end++;
        }

        return false;
    }
}

====

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int len1 = s1.length();
        int len2 = s2.length();

        if (len1 > len2) {
            return false;
        }

        Map<Character, Integer> map1 = new HashMap();
        for (int i = 0; i < len1; i++) {
            char cur = s1.charAt(i);
            map1.putIfAbsent(cur, 0);
            map1.put(cur, map1.get(cur) + 1);
        }

        Map<Character, Integer> map2 = new HashMap();
        for (int i = 0; i < len1; i++) {
            char cur = s2.charAt(i);
            map2.putIfAbsent(cur, 0);
            map2.put(cur, map2.get(cur) + 1);
        }

        if (map2.equals(map1)) {
            return true;
        }

        int start = 1;
        int end = len1;
        while (end < len2) {
            char removed = s2.charAt(start - 1);
            
            if (map2.containsKey(removed)) {
                int v = map2.get(removed);
                if (v <= 1) {
                    map2.remove(removed);
                } else {
                    map2.put(removed, map2.get(removed) - 1);
                }
            } 

            char cur = s2.charAt(end);
            map2.putIfAbsent(cur, 0);
            map2.put(cur, map2.get(cur) + 1);

            if (map2.equals(map1)) {
                return true;
            }

            start++;
            end++;
        }

        return false;
    }
}

====

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int len1 = s1.length();
        int len2 = s2.length();

        int[] a1 = new int[26];
        for (int i = 0; i < len1; i++) {
            char cur = s1.charAt(i);
            int index = cur - 'a';
            a1[index] += 1;
        }

        int[] a2 = new int[26];
        int left = 0;
        int right = 0;
        while (right < len2) {
            char cur = s2.charAt(right);
            int index = cur - 'a';
            a2[index] += 1;

            System.out.println(cur);

            int diff = right - left + 1;
            if (diff < len1) {
                right++;
                continue;
            } else if (diff == len1) {
                if (isMatch(a1, a2)) {
                    return true;
                } else {
                    right++;
                    continue;
                }
            } else {
                char remove = s2.charAt(left);
                int removeIndex = remove - 'a';
                a2[removeIndex] -= 1;
                if (isMatch(a1, a2)) {
                    return true;
                } else {
                    left++;
                    right++;
                    continue;
                }
            }
        }

        return false;
    }

    public boolean isMatch(int[] a1, int[] a2) {
        for (int i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i]) {
                return false;
            }
        }
        return true;
    }
}
