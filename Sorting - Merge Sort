class Solution {
    public void mergeSort(int[] arr, int low, int high) {
        if (high <= low) return;
        
        var mid = low + (high - low) / 2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid + 1, high);
        merge(arr, low, mid, high);
    }
    
    private void merge(int[] arr, int low, int mid, int high) {
        int[] leftArr = new int[mid - low + 1];
        int[] rightArr = new int[high - mid];
        
        for (int i = 0; i < mid - low + 1; i++) {
            leftArr[i] = arr[low + i];
        }
        for (int i = 0; i < high - mid; i++) {
            rightArr[i] = arr[mid + i + 1];
        }
        
        var leftIndex = 0;
        var rightIndex = 0;
        for (int i = low; i < high + 1; i++) {
            if (leftIndex < leftArr.length && rightIndex < rightArr.length) {
                if (leftArr[leftIndex] < rightArr[rightIndex]) {
                    arr[i] = leftArr[leftIndex];
                    leftIndex++;
                } else {
                    arr[i] = rightArr[rightIndex];
                    rightIndex++;
                }
            } else if (leftIndex < leftArr.length) {
                arr[i] = leftArr[leftIndex];
                leftIndex++;
            } else if (rightIndex < rightArr.length) {
                arr[i] = rightArr[rightIndex];
                rightIndex++;
            }
        }
    }
}

TC: O(nlogn)
NOTE: out-of-place
