https://leetcode.com/problems/rotting-oranges/

class Solution {
    public int orangesRotting(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (grid[row][col] == 2) {
                    dfs(grid, rows, cols, row, col, 2);
                }
            }
        }
        
        int res = 2;
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (grid[row][col] == 1) {
                    return -1;
                } else {
                    res = Math.max(res, grid[row][col]);
                }
            }
        }
        
        return res - 2;
    }
    
    private void dfs(int[][] grid, int rows, int cols, int row, int col, int step) {
        if (row < 0 || 
            row >= rows || 
            col < 0 || 
            col >= cols || 
            grid[row][col] == 0 ||
            grid[row][col] > 1 && grid[row][col] < step
           ) {
            return;
        }
        
        grid[row][col] = step;
        
        dfs(grid, rows, cols, row + 1, col, step + 1);
        dfs(grid, rows, cols, row - 1, col, step + 1);
        dfs(grid, rows, cols, row, col + 1, step + 1);
        dfs(grid, rows, cols, row, col - 1, step + 1);
    }
}

====

class Solution {
    public int orangesRotting(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int[][] dirs = {{1,0},{0,1},{-1,0},{0,-1}};
        Queue<int[]> q = new LinkedList();
        int count = 0;
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (grid[row][col] == 2) {
                    q.offer(new int[]{row,col});
                } else if (grid[row][col] == 1) {
                    count++;
                }
            }
        }
        
        int res = 0;
        int size = 0;
        while (!q.isEmpty()) {
            size = q.size();
            while (size > 0) {
                int[] cur = q.poll();
                for (int[] dir : dirs) {
                    int r = dir[0] + cur[0];
                    int c = dir[1] + cur[1];
                    if (r >= 0 && r < rows && c >= 0 && c < cols && grid[r][c] == 1) {
                        grid[r][c] = 2;
                        q.offer(new int[]{r,c});
                        count--;
                    }
                }
                size--;
            }
            if (!q.isEmpty()) {
                res++;    
            }
        }
        
        if (count == 0) {
            return res;
        } else {
            return -1;
        }
    }
}

====

class Solution {
    public int orangesRotting(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        int[][] dirs = {{1,0},{0,1},{-1,0},{0,-1}};

        Queue<int[]> q = new LinkedList<>();
        int count = 0;
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (grid[row][col] == 2) {
                    q.offer(new int[]{row,col});
                } else if (grid[row][col] == 1) {
                    count++;
                }
            }
        }

        int size = 0;
        int level = 0;
        while (!q.isEmpty()) {
            size = q.size();
            while (size > 0) {
                int[] cur = q.poll();
                for (int[] dir : dirs) {
                    int r = dir[0] + cur[0];
                    int c = dir[1] + cur[1];
                    if (r >= 0 && r < rows && c >= 0 && c < cols && grid[r][c] == 1) {
                        grid[r][c] = 2;
                        count--;
                        q.offer(new int[]{r,c});
                    }
                }
                size--;
            }
            if (q.size() != 0) {
                level++;
            }
        }

        if (count == 0) {
            return level;
        } else {
            return -1;
        }
    }
}
