public static int knapsackDp(int[] w, int[] v, int n, int W) {
    int[][] dp = new int[n + 1][W + 1];
    for (int i = 1; i <= n; i++) {
        int itemW = w[i - 1];
        int itemV = v[i - 1];
        for (int j = 1; j <= W; j++) {
            if (itemW > j) {
                dp[i][j] = dp[i - 1][j];
            } else {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - itemW] + itemV);
            }
        }
    }
    return dp[n][W];
}
    
====

public static int knapsackRec(int[] w, int[] v, int n, int W) {
    if (n <= 0) {
        return 0;
    }
    if (w[n - 1] > W) {
        return knapsackRec(w, v, n - 1, W);
    }
    return Math.max(knapsackRec(w, v, n - 1, W), knapsackRec(w, v, n - 1, W - w[n - 1]) + v[n - 1]);
}
