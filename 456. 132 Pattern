https://leetcode.com/problems/132-pattern/

class Solution {
    public boolean find132pattern(int[] nums) {
        var stack = new Stack<int[]>();
        var min = nums[0];
        for (int i = 1; i < nums.length; i++) {
            while (!stack.isEmpty() && stack.peek()[1] <= nums[i]) {
                stack.pop();
            }
            if (!stack.isEmpty() && stack.peek()[0] < nums[i]) {
                return true;
            }
                
            if (nums[i] < min) {
                min = nums[i];
            } else {
                stack.push(new int[]{min, nums[i]});
            }
        }
        return false;
    }
}

====

class Solution {
    public boolean find132pattern(int[] nums) {
        var len = nums.length;
        if (len < 3) {
            return false;
        }
        
        var stack = new Stack<MinAndMax>();
        var min = nums[0]; 
        for (int i = 1; i < len; i++) {
            while (!stack.isEmpty() && nums[i] >= stack.peek().max) {
                stack.pop();
            }
            if (!stack.isEmpty() && nums[i] > stack.peek().min) {
                return true;
            }
            stack.push(new MinAndMax(min, nums[i]));
            min = Math.min(min, nums[i]);
        }
        return false;
    }
    
    public record MinAndMax(int min, int max) {}
}
