https://leetcode.com/problems/battleships-in-a-board/

class Solution {
    public int countBattleships(char[][] board) {
        int rows = board.length;
        int cols = board[0].length;       
        int count = 0;
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (board[row][col] == 'X') {
                    count++;
                    dfs(board, rows, cols, row, col);
                }
            }
        }
        return count;
    }
    
    private void dfs(char[][] board, int rows, int cols, int row, int col) {
        int[][] dirs = {{1,0},{0,1}};
        board[row][col] = '.';
        for (int[] dir : dirs) {
            int r = row + dir[0];
            int c = col + dir[1];
            if (r >= 0 && r < rows && c >=0 && c < cols && board[r][c] == 'X') {
                dfs(board, rows, cols, r, c);
            }
        }
    }
}

====

class Solution {
    public int countBattleships(char[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        int[][] dirs = {{1,0},{0,1}};
        Queue<int[]> q = new LinkedList();
        int count = 0;
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (board[row][col] == 'X') {
                    count++;
                    q.offer(new int[]{row,col});
                    while (!q.isEmpty()) {
                        int[] cur = q.poll();
                        board[cur[0]][cur[1]] = '.';
                        for (int[] dir : dirs) {
                            int r = cur[0] + dir[0];
                            int c = cur[1] + dir[1];
                            if (r >= 0 && r < rows && c >= 0 && c < cols && board[r][c] == 'X') {
                                q.offer(new int[]{r,c});
                            }
                        }    
                    }
                }
            }
        }
        return count;
    }
}
