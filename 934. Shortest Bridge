https://leetcode.com/problems/shortest-bridge/

class Solution {
    int[][] coors = {{-1,0},{0,-1},{1,0},{0,1}};
    
    public int shortestBridge(int[][] grid) {
        var points = new LinkedList<int[]>();
        var found = false;
        for (var i = 0; i < grid.length; i++) {
            if (found) break;
            for (var j = 0; j < grid.length; j++) {
                if (grid[i][j] == 1) {
                    island(grid, i, j, points);
                    found = true;
                    break;
                }
            }
        }
        var level = 0;
        while (!points.isEmpty()) {
            level++;
            var size = points.size();
            while (size > 0) {
                size--;
                var point = points.poll();
                grid[point[0]][point[1]] = 2;
                for (var coor: coors) {
                    var i = point[0] + coor[0];
                    var j = point[1] + coor[1];
                    if (i >= 0 && i < grid.length && j >= 0 && j < grid[0].length) {
                        if (grid[i][j] == 0) {
                            points.offer(new int[]{i, j});
                        } else if (grid[i][j] == 1) {
                            return level;
                        }
                    }
                }
            }
        }
        return 0;
    }
    
    private void island(int[][] grid, int i, int j, Queue<int[]> points) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 2) {
            return;
        }
        
        if (grid[i][j] == 0) {
            points.offer(new int[]{i, j});
            return;
        }
        
        grid[i][j] = 2;
        island(grid, i - 1, j, points);
        island(grid, i + 1, j, points);
        island(grid, i, j - 1, points);
        island(grid, i, j + 1, points);
    }
}
