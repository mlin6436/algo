https://leetcode.com/problems/word-search/

class Solution {
    public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (bt(board, i, j, visited, word, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private boolean bt(
        char[][] board, 
        int i, 
        int j, 
        boolean[][] visited, 
        String word, 
        int pos
    ) {
        if (
            i < 0 || 
            i >= board.length || 
            j < 0 || 
            j >= board[0].length || 
            visited[i][j] ||
            board[i][j] != word.charAt(pos)
        ) {
            return false;
        }
        
        if (pos == word.length() - 1) {
            return true;
        }
        
        visited[i][j] = true;
        var right = bt(board, i + 1, j, visited, word, pos + 1);
        var up = bt(board, i, j + 1, visited, word, pos + 1);
        var left = bt(board, i - 1, j, visited, word, pos + 1);
        var down = bt(board, i, j - 1, visited, word, pos + 1);
        visited[i][j] = false;
        
        return right || up || left || down;
    }
}

====

class Solution {
    boolean res = false;
    
    public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                bt(board, i, j, visited, word, 0, res);        
            }
        }
        return res;
    }
    
    private void bt(
        char[][] board, 
        int i, 
        int j, 
        boolean[][] visited, 
        String word, 
        int pos, 
        boolean found
    ) {
        if (
            i < 0 || 
            i >= board.length || 
            j < 0 || 
            j >= board[0].length || 
            visited[i][j] ||
            res ||
            board[i][j] != word.charAt(pos)
        ) {
            return;
        }
        
        if (pos == word.length() - 1) {
            res = true;
            return;
        }
        
        visited[i][j] = true;
        bt(board, i + 1, j, visited, word, pos + 1, found);
        bt(board, i, j + 1, visited, word, pos + 1, found);
        bt(board, i - 1, j, visited, word, pos + 1, found);
        bt(board, i, j - 1, visited, word, pos + 1, found);
        visited[i][j] = false;
    }
}
