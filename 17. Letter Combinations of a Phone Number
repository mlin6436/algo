https://leetcode.com/problems/letter-combinations-of-a-phone-number/

class Solution {
    private String[] dict = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    
    public List<String> letterCombinations(String digits) {
        var res = new ArrayList();
        var sb = new StringBuilder();
        bt(digits, 0, res, sb);
        return res;
    }

    private void bt(String digits, int pos, List<String> res, StringBuilder sb) {
        if (pos == digits.length()) {
            if (sb.length() > 0) {
                res.add(sb.toString());
            }
            return;
        }
        
        int cur = digits.charAt(pos) - '0';
        for (Character c: dict[cur].toCharArray()) {
            sb.append(c);
            bt(digits, pos + 1, res, sb);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}

====

class Solution {
    public List<String> letterCombinations(String digits) {
        var res = new ArrayList();
        bt(digits, 0, res, "");
        return res;
    }

    private void bt(String digits, int pos, List<String> res, String tmp) {
        if (pos == digits.length()) {
            if (!tmp.isEmpty()) {
                res.add(tmp);
            }
            return;
        }
        
        String[] dict = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        
        int cur = digits.charAt(pos) - '0';
        for (Character c: dict[cur].toCharArray()) {
            bt(digits, pos + 1, res, new String(tmp + c.toString()));
        }
    }
}
