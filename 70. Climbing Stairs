https://leetcode.com/problems/climbing-stairs/

class Solution {
    public int climbStairs(int n) {
        if (n <= 2) return n;
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
}

====

class Solution {
    public int climbStairs(int n) {
        return climb(n, 0);
    }
    
    private int climb(int n, int res) {
        if (n == 0) {
            return 0;
        } else if (n == 1) {
            return 1;
        } else if (n == 2) {
            return 2;
        } else {
            return climb(n - 1, res) + climb(n - 2, res);    
        }
    }
}
