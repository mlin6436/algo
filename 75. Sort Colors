https://leetcode.com/problems/sort-colors/

class Solution {
    public void sortColors(int[] nums) {
        var map = new TreeMap<Integer, Integer>();
        for (var num: nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        var i = 0;
        for (var entry: map.entrySet()) {
            var key = entry.getKey();
            var value = entry.getValue();
            while (value-- > 0) {
                nums[i++] = key;
            }
        }
    }
}

====

class Solution {
    public void sortColors(int[] nums) {
        int zero = 0;
        int two = nums.length - 1;
        int cur = 0;
        while (cur <= two) {
            if (nums[cur] == 2) {
                nums[cur] = nums[two];
                // cur++;
                nums[two] = 2;
                two--;
            } else if (nums[cur] == 0) {
                nums[cur] = nums[zero];
                cur++;
                nums[zero] = 0;
                zero++;
            } else {
                cur++;
            }
        }
    }
}

====

class Solution {
    public void sortColors(int[] nums) {
        int[] n = new int[3];
        for (int num : nums) {
            n[num]++;
        }
        for (int i = 0; i < nums.length; i++) {
            if (n[0] != 0) {
                nums[i] = 0;
                n[0]--;
            } else if (n[1] != 0) {
                nums[i] = 1;
                n[1]--;
            } else {
                nums[i] = 2;
                n[2]--;
            }
        }
    }
}
